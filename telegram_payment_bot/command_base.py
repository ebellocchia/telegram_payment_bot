# Copyright (c) 2021 Emanuele Bellocchia
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

#
# Imports
#
import pyrogram
from abc import ABC, abstractmethod
from pyrogram.errors import RPCError
from telegram_payment_bot.command_data import CommandData
from telegram_payment_bot.config import Config
from telegram_payment_bot.logger import Logger
from telegram_payment_bot.message_sender import MessageSender
from telegram_payment_bot.special_users_list import AuthorizedUsersList
from telegram_payment_bot.user_helper import UserHelper


#
# Classes
#

#
# Generic command base class
#
class CommandBase(ABC):
    # Constructor
    def __init__(self,
                 client: pyrogram.Client,
                 config: Config,
                 logger: Logger) -> None:
        self.config = config
        self.logger = logger
        self.client = client
        self.message = None
        # Helper classes
        self.cmd_data = None
        self.message_sender = MessageSender(client, config, logger)

    # Set message
    def SetMessage(self,
                   message: pyrogram.types.Message) -> None:
        self.message = message
        self.cmd_data = CommandData(message)

    # Execute command
    def Execute(self) -> None:
        # Log command
        self.__LogCommand()

        # Check if user is authorized
        if self._IsUserAuthorized():
            # Try to execute command
            try:
                self._ExecuteCommand()
            except RPCError:
                self._SendMessage("**ERROR**\nAn error occurred while executing command.")
                self.logger.GetLogger().exception("An error occurred while executing command %s" % self.cmd_data.Name())
        else:
            if self._IsChatPrivate():
                self._SendMessage("**ERROR**\nYou are not authorized to use the command.")

            self.logger.GetLogger().warning(
                "User %s tried to execute the command but it's not authorized" % UserHelper.GetNameOrId(
                    self.cmd_data.User()))

    # Send message
    def _SendMessage(self,
                     msg: str) -> None:
        if self._IsQuietMode():
            self.message_sender.SendMessage(self.cmd_data.User(), msg)
        else:
            self.message_sender.SendMessage(self.cmd_data.Chat(), msg)

    # Send message to authorized users
    def _SendMessageToAuthUsers(self,
                                msg: str) -> None:
        self.message_sender.SendMessageToAuthUsers(self.cmd_data.Chat(), msg)

    # Get if user is authorized
    def _IsUserAuthorized(self) -> bool:
        return AuthorizedUsersList(self.config).IsUserPresent(self.cmd_data.User())

    # Get if chat is private
    def _IsChatPrivate(self) -> bool:
        return self.cmd_data.User().id == self.cmd_data.Chat().id

    # Get if quiet mode
    def _IsQuietMode(self) -> bool:
        # It's ok in any position
        return self.cmd_data.Params().IsLast("q") or self.cmd_data.Params().IsLast("quiet")

    # Generate new invite link
    def _NewInviteLink(self) -> None:
        # Generate new invite link
        invite_link = self.client.export_chat_invite_link(self.cmd_data.Chat().id)
        # Build message
        msg = "**INVITE LINK**\n"
        msg += "New invite link for the group **\"%s\"**: %s\n" % (self.cmd_data.Chat().title, invite_link)
        msg += "The old link has been revoked.\n"
        msg += "If you have invite links generated by you, revoke them and use the one generated by the bot."

        # Send messages
        self._SendMessage("**INVITE LINK**\nNew invite link generated.\nThe link has been sent privately to authorized users.")
        self._SendMessageToAuthUsers(msg)

    # Log command
    def __LogCommand(self) -> None:
        # Log
        self.logger.GetLogger().info("Command: %s" % self.cmd_data.Name())
        self.logger.GetLogger().info("Executed by user: %s" % UserHelper.GetNameOrId(self.cmd_data.User()))
        self.logger.GetLogger().debug("Received message: %s" % self.message)

    # Execute command - Abstract method
    @abstractmethod
    def _ExecuteCommand(self) -> None:
        pass
